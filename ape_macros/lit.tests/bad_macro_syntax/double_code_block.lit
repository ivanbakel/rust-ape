@title Using a code block operator twice

@code_type rust .rs

The code block operator can only be used once per pattern - any more is considered more likely to be a user error than deliberate, and causes a message to be raised.
--- double_code_block.rs
#![feature(proc_macro_hygiene)]
extern crate ape_macros;

use ape_macros::pattern;

struct Foo {}

fn main() {
  pattern!{|| : Foo -> Bar Foo => {} => {} }
}
---

--- double_code_block.stderr
error: Unexpected code block after a pattern which already has a code block.
 --> $DIR/double_code_block.rs:9:38
  |
9 |   pattern!{|| : Foo -> Bar Foo => {} => {} }
  |                                      ^^^^^

error: aborting due to previous error

---

This ignores bracketing, as it should not be syntactically significant apart from for precedence purposes.
--- double_code_block_with_brackets.rs
#![feature(proc_macro_hygiene)]
extern crate ape_macros;

use ape_macros::pattern;

struct Foo {}

fn main() {
  pattern!{|| : Foo -> Bar (Foo => {}) => {} }
}
---

--- double_code_block_with_brackets.stderr
error: Unexpected code block after a pattern which already has a code block.
 --> $DIR/double_code_block_with_brackets.rs:9:40
  |
9 |   pattern!{|| : Foo -> Bar (Foo => {}) => {} }
  |                                        ^^^^^

error: aborting due to previous error

---
