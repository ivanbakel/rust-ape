@title Parseable feeds of values

@code_type rust .rs

@s The `feed.rs` file

--- feed.rs
@{imports}

@{the parsefeed trait}
---

@s The ParseFeed trait

A `ParseFeed` is any type which implements the necessary operators to be useable as a parsing state. These are
--- the parsefeed trait
pub trait ParseFeed:
 @{parsefeed requirements} 
{
  @{parsefeed features}

  @{parsefeed default methods}
}
---
 * producing an attempt state to try to parse with - this is equivalent to being `Clone`
--- parsefeed requirements
Clone
---
We mark this function `must_use` for the same reason `clone` is - it is expected to be side-effect free and non-negligible to perform, so ignoring the returned attempt is an error.
--- parsefeed features
#[must_use = "a parsing attempt is not expected to have side-effects"]
fn attempt(&self) -> Self where Self: Sized {
  self.clone()
}
---
 * commiting a state to an attempt which has succeeded - since the `ParseFeed` is `Clone`, this is equivalent in behaviour to `clone_from` - copying a value over an existing one.
--- parsefeed features
fn commit(&mut self, attempt: &Self) where Self: Sized {
  self.clone_from(attempt)
}
---
 * emitting the next token, if any - this is equivalent to being an `Iterator`
--- parsefeed requirements
 + Iterator
---
Reverting on a failed state can be done by simply discarding an attempt.

@s Using the ParseFeed

--- imports
use crate::{Result, Error, ErrorKind};
---

`ParseFeed` provides some basic methods to help with writing patterns.

The first is a "expecting a next token" function which produces an error if there is no next token.
--- parsefeed default methods+=
fn expect(&mut self) -> Result<Self::Item> {
  if let Some(val) = self.next() {
    Ok(val)
  } else {
    Err(unexpected_end_of_input!())
  }
}
---
The second is an extension of the first to "expect n tokens", simply by repeating `expect()` `n` times.
--- parsefeed default methods+=
fn expect_n(&mut self, n: usize) -> Result<Vec<Self::Item>> {
  let mut items = Vec::with_capacity(n);
  for _ in 0..n {
    items.push(self.expect()?);
  }
  Ok(items)
}
--- 

