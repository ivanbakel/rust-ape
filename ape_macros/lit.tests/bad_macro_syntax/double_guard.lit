@title Writing two `if` guards for one pattern

@code_type rust .rs

The guard operator can only be used once per pattern - any more is considered more likely to be a user error than deliberate, and causes a message to be raised.
--- double_guard.rs
#![feature(proc_macro_hygiene)]
extern crate ape_macros;

use ape_macros::pattern;

struct Foo {}

fn main() {
  pattern!{|| : Foo -> Bar Foo if true if false }
}
---

--- double_guard.stderr
error: Unexpected guard `false` after a pattern which already has a guard `true`.
 --> $DIR/double_guard.rs:9:43
  |
9 |   pattern!{|| : Foo -> Bar Foo if true if false }
  |                                           ^^^^^

error: aborting due to previous error

---

This ignores bracketing, as it should not be syntactically significant apart from for precedence purposes.
--- double_guard_with_brackets.rs
#![feature(proc_macro_hygiene)]
extern crate ape_macros;

use ape_macros::pattern;

struct Foo {}

fn main() {
  pattern!{|| : Foo -> Bar (Foo if true) if false }
}
---

--- double_guard_with_brackets.stderr
error: Unexpected guard `false` after a pattern which already has a guard `true`.
 --> $DIR/double_guard_with_brackets.rs:9:45
  |
9 |   pattern!{|| : Foo -> Bar (Foo if true) if false }
  |                                             ^^^^^

error: aborting due to previous error

---

