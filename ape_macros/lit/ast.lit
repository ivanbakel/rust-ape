@title Ape's syntax

@code_type rust .rs

The AST code is a single file

--- ast.rs+=
@{ast imports}

@{ast contents}
---

@s The AST types

A pattern is represented as a struct
--- ast contents+=
pub(crate) struct Pattern {
  @{pattern fields}
}
---

with many possible variants 
--- ast contents+=
pub(crate) enum PatternType {
  @{ast variants}
}
--- 
--- pattern fields+=
pub variant: PatternType,
---

@ss Basic features

The unit of Ape's grammar is a Rust pattern.

--- ast imports+=
use proc_macro2::{TokenStream};
---

--- ast variants+=
Raw(TokenStream),
---

Ape supports all the expected PEG features:
  * sequencing patterns in Ape is done with a `~` between patterns, similar to Pest.
--- ast variants+=
Sequence(Vec<Pattern>),
---
  
  * alternation is done by `|` between patterns, the same as with regular Rust.
--- ast variants+=
Alternation(Vec<Pattern>),
---

  * negation is done by prefixing a pattern with `!`.
--- ast variants+=
Negation(Box<Pattern>),   
---

  * lookahead can be denoted by prefixing a pattern with `->`.
--- ast variants+=
Lookahead(Box<Pattern>),
---

  * optional (zero-or-one) patterns are denoted by appending a `?`.
--- ast variants+=
Optional(Box<Pattern>),
---

  * zero-or-more and one-or-more are done by appending `*` and `+` respectively.
  
Both of these share a backend representation as a repeated pattern with some parameters

--- ast variants+=
Repetition {
  pattern: Box<Pattern>,
  @{repetition parameters} 
},
---

To represent all repetition numbers, the parameters include the lower and upper bounds. These are required, but can be set to be essentially meaningless by giving `0` and `usize::max` respectively - however, because `usize` values cannot be converted back into tokens, we store the bounds as raw `TokenStream`s. 

--- repetition parameters+=
at_least: TokenStream,
at_most: TokenStream,
--- 

Ape also borrows from `rust-peg` the handy extension that `pattern ** delimiter` and `pattern ++ delimiter` represent zero-or-more and one-or-more matches of a pattern, separated by the delimiter pattern, respectively. These are also repetitions, and they require an additional parameter

--- repetition parameters+=
delimiter: Option<Box<Pattern>>,
---

Since the base units of the grammar are Rust patterns, several things are supported by native syntax
 * ranges
 * the 'any' pattern - by `_`
 * conditional matching - by `if` guards

--- pattern fields+=
pub guard: Option<TokenStream>,
---

 * aliasing the matches of patterns, by `<ident> @ { ... }`

--- ast imports+=
use proc_macro2::Ident;
---

--- pattern fields+=
pub alias: Option<Ident>,
---

Aliasing a sequence or repetition of matches will yield a `Vec` of the match values.

@ss Building values from the pattern

By default, Ape will make a successful parse return nothing. To instead return a value, we can end the pattern with an arrow `=>` followed by a curly block `{}` containing Rust code. The code will have access to variables bound in the pattern. 

--- pattern fields+=
pub code_block: Option<TokenStream>,
---

@ss Pattern subrules

Ape does not have an intrinsic notion of rules and rule use. Instead, an Ape pattern can be embedded inside another pattern using `{}` - a brace block. The contents of the brace block will be evaluated as Rust code, and the result will be used to do matching.

--- ast variants+=
Runtime(TokenStream),
---

@ss Type information

Since Ape allows for rules over arbitrary types and returning arbitrary types, rules can also be annotated with an input-output type arrow, `<type> -> <type>`. However, it's not necessary to know the type of *every* rule, so the annotation is optional.
--- pattern fields+=
pub type_annotation: Option<TypeSignature>,
---
The TypeSignature struct is a simple representation of the arrow.
--- ast contents+=
#[derive(Clone)]
pub(crate) struct TypeSignature {
  pub input: TokenStream,
  pub output: TokenStream,
}
---

@s Error reporting

It can be useful, for error reporting, to link a problem in the code with a pattern in the AST - for this, we need to produce a `Span` for each `Pattern`
--- ast imports 
use proc_macro2::{Span};
---
--- pattern fields
pub location: Span,
---

