@title Ape's pattern representation

@code_type rust .rs

--- patterns.rs
@{imports}

@{the pattern trait}

@{the stateful pattern trait}
---

@s The pattern trait

The `Pattern` trait is Ape's representation of a generic way of doing runtime matching. A `Pattern` matches some input, which is decided by a type parameter constrained by being a `ParseFeed`
--- imports+=
use crate::{ParseFeed};
---
--- the pattern trait
pub trait Pattern<PF: ParseFeed> {
  @{pattern features}
}

@{some handy pattern impls}
--- 

What does a `Pattern` do? That depends on its `PF` type parameter, and some `Output` type. The output is decided by the input and whatever is implementing the trait, so it's an associated type.
--- pattern features+=
type Output;
---

Then a `Pattern` will take some form of `ParseFeed`, and maybe, if it matches, produce some kind of `Output`, or have the option to fail - errors are encoded as Ape's own `Error` type.
--- imports+=
use crate::{Result};
---

--- pattern features+=
fn pmatch(self, parse_feed: &mut PF) -> Result<Self::Output>;
---

Why are we constraining the trait in this way? After all, the trait could omit the `PF` parameter and instead have it be generic in `pmatch()`, but then we would encounter a problem: we want to be able to use functions as patterns, but a function wouldn't be able to implement that generic-in-method trait because it would need to be generic in its `Fn` trait, which Rust doesn't let us express. So instead `Pattern` impls are expected to be for all `ParseFeed`s for utility.

@s Example impls

@ss Function implementation

Since `Pattern` is a "functional interface", it has a natural implementation on things which are functions of the same signature - just call the function.
--- some handy pattern impls+=
impl<Func, Input, Output, PF: ParseFeed<Token=Input>> Pattern<PF> for Func where
  Func: Fn(&mut PF) -> Result<Output> {
  type Output = Output;

  fn pmatch(self, parse_feed: &mut PF) -> Result<Output> {
    self(parse_feed)
  }
}
---

@s The stateful pattern trait 

The `StatefulPattern` trait is an extension of the above idea - it functions similarly, but includes a state component which is passed by reference to each pattern. The state allows for the pattern to change behaviour at runtime, and is desireable for reasons of pattern reuseability. The state is tracked by an additional type variable in the trait, `State`.

--- the stateful pattern trait
pub trait StatefulPattern<PF: ParseFeed, State> {
  @{stateful pattern features}
}

@{some handy stateful pattern impls}
--- 

The nature of the stateful pattern is no surprise when considering the original `Pattern` trait
--- stateful pattern features+=
type Output;

fn pmatch(self, parse_feed: &mut PF, state: &State) -> Result<Self::Output>;
---

@s Example impls

@ss Function implementation

`StatefulPattern` is a "functional interface" as well, so it has an equivalent implementation for `Fn` traits.
--- some handy stateful pattern impls+=
impl<Func, Input, Output, PF: ParseFeed<Token=Input>, State> StatefulPattern<PF, State> for Func where
  Func: Fn(&mut PF, &State) -> Result<Output> {
  type Output = Output;

  fn pmatch(self, parse_feed: &mut PF, state: &State) -> Result<Output> {
    self(parse_feed, state)
  }
}
---

@ss All patterns are (generally) stateful

On the other hand, a `Pattern` is really just a `StatefulPattern` *without* a state - or equivalently, with a state of `()`, the empty tuple. It can be handy to think about `Pattern`s in this way to allow for just one kind of code to be written - that handling `StatefulPattern`s.

The issue is that we can't just define this on a `Pattern`-implementing type directly, because it would conflict with the previous functional definition. Instead, we create a wrapper, `Stateful`:
--- some handy stateful pattern impls
pub struct Stateful<P>(P);

impl<Input, PF: ParseFeed<Token=Input>, P> StatefulPattern<PF, ()> for Stateful<P> where
  P: Pattern<PF> {
  type Output = P::Output;

  fn pmatch(self, parse_feed: &mut PF, _empty_state: &()) -> Result<Self::Output> {
    self.0.pmatch(parse_feed)
  }
}
---

and a function to easily turn a `Pattern` into a `Stateful` of that `Pattern`:
--- pattern features
fn stateful(&self) -> Stateful<&Self> {
  Stateful(self)
}
---
