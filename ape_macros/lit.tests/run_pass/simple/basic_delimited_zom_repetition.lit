@title A basic ZOM (zero-or-more) repetition with a delimiter

@code_type rust .rs

--- basic_delimited_zom_repetition.rs
// run-pass
#![feature(proc_macro_hygiene)]
extern crate ape_macros;
extern crate ape;

use ape_macros::{pattern};
use ape::Pattern;

extern crate matches;

use matches::matches;

fn main() {
  let zom_pattern = pattern!{|| : bool -> () true ** false};
  
  @{delimited ZOM tests}
}
---

The pattern should consume delimiters as expected.
--- delimited ZOM tests
let mut sequence = vec![true, false, true, false, true].into_iter();
let mut feed = ape::CopyParseState::from(sequence);

assert!(zom_pattern.pmatch(&mut feed).is_ok());
matches!(feed.next(), None);
---  

A ZOM pattern with a delimiter still accepts 0 input.
--- delimited ZOM tests
let mut sequence = vec![].into_iter();
let mut feed = ape::CopyParseState::from(sequence);

assert!(zom_pattern.pmatch(&mut feed).is_ok());
---  

A ZOM pattern which matches the delimiter but fails the subsequent pattern shouldn't eat the delimiter.
--- delimited ZOM tests
let mut sequence = vec![true, false].into_iter();
let mut feed = ape::CopyParseState::from(sequence);

assert!(zom_pattern.pmatch(&mut feed).is_ok());
matches!(feed.next(), Some(false));
---
