@title Ape - an Arbitrary-type Parser Expression Grammar library

@code_type rust .rs

Ape is a library for producing Parser Expression Grammars over any type, using Rust's native pattern-matching syntax, in the style of kevinmehall's `rust-peg`. Ape aims to let you write a parser using an intuitive `peg`-style syntax and the same concepts as `&str`-parsers - in particular

 * pattern binding and postprocessing in native Rust
 * zero-copy parsing over sliceable sources
 * natural expressive power, like sequences, alternatives, and negation

@s The macro file

Ape's macro code is a library file, which has the standard Rust format

--- lib.rs
@{features}

@{crates}

@{imports}

@{content}
---

@s The `pattern!` macro
 
An Ape parser is produced by the `pattern!` procedural macro, which does the work of generating an Ape AST and outputting pure Rust. Proc macros are declared as functions over `TokenStream`s, with the `[proc_macro]` attribute

--- content+=
#[proc_macro]
pub fn pattern(tokens: proc_macro::TokenStream) -> proc_macro::TokenStream {
  @{build an arbitrary parser from tokens}
}
---

Procedural macros require the `proc_macro` crate. We also enable an optional feature, the ability to use macros as items.
--- features+=
#![feature(proc_macro_hygiene)]
---
--- crates+=
extern crate proc_macro;
---

However, we don't want to work on `proc_macro` types - they're not very useful featurewise. Instead, we will convert them to and from a more helpful variant in the `proc_macro2` crate.
--- crates
extern crate proc_macro2;
---
`TokenStream`, above, needs to be imported, along with the rest of the Rust AST
--- imports+=
use proc_macro2::*;
---

We also want to be able to quasi-quote generated code, for readability
--- crates
extern crate quote;
use quote::{quote_spanned};
---

Finally, we define the high-level flow of the macro - first, an AST is build to represent the pattern for which code needs to be generated; then, the generated Rust is produced by walking the AST.

--- build an arbitrary parser from tokens
let tokens = TokenStream::from(tokens);
let ast = self::parsing::parse(tokens);
let code = ast.and_then(|tree| self::code::generate(tree));
let generated = code.unwrap_or_else(|parsing::Error { message, location }| {
  quote_spanned! {location=>
    compile_error!(#message)
  }
});
proc_macro::TokenStream::from(generated)
---

These steps are defined in the appropriate modules:

--- lib.rs+=
mod ast;
mod parsing;
mod code;
---

@s Debug macro

To help with debugging the result of macro invocations, the crate also supplies a version of the original macro that outputs the generated code.
--- content+=
#[proc_macro]
pub fn pattern_debug(tokens: proc_macro::TokenStream) -> proc_macro::TokenStream {
  let generated_code = pattern(tokens);
  print!("{}", generated_code);
  generated_code
}
---

@s Syn

Syn is used to do some parsing of Rust syntax. Its features are explained more in the `parsing` module.
--- crates+=
extern crate syn;
---

