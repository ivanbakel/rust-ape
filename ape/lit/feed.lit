@title Parseable feeds of values

@code_type rust .rs

@s The `feed.rs` file

--- feed.rs
@{imports}

@{the parsefeed trait}

@{parsefeed implementations}
---

@s The ParseFeed trait

A `ParseFeed` is any type which implements the necessary operators to be useable as a parsing state. These are
--- the parsefeed trait
pub trait ParseFeed
{
  @{parsefeed features}

  @{parsefeed default methods}
}
---
 * producing an attempt state to try to parse with. We mark this function `must_use` for the same reason `clone` is - it is expected to be side-effect free and non-negligible to perform, so ignoring the returned attempt is an error.
--- parsefeed features
#[must_use = "a parsing attempt is not expected to have side-effects"]
fn attempt(&self) -> Self where Self: Sized;
---
 * commiting a state to an attempt which has succeeded.
--- parsefeed features
fn commit(&mut self, attempt: &Self) where Self: Sized;
---
 * emitting the next token, if any. The token type is defined as an associated type, similar to `Iterator`.
--- parsefeed features
type Token;

fn step(&mut self) -> Option<Self::Token>;
---

Reverting on a failed state can be done by simply discarding an attempt.

@ss The `std` default implementation

These features can actually be emulated simply by already implementing two `std` traits - `Clone` and `Iterator`.
--- parsefeed implementations
impl<Feed: Clone + Iterator + Sized> ParseFeed for Feed {
  @{std trait implementation}
}
---
`attempt()` and `commit()` have corresponding `Clone` calls - `clone()` and `clone_from()` respectively.
--- std trait implementation
fn attempt(&self) -> Self {
  self.clone()
}

fn commit(&mut self, attempt: &Self) {
  self.clone_from(attempt)
}
---
And `step()` is identical to `next()`, meaning the associated type of `Token` is equal to `Item`
--- std trait implementation
type Token = Feed::Item;

fn step(&mut self) -> Option<Self::Token> {
  self.next()
}
---

@s Using the ParseFeed

--- imports
use crate::{Result, Error};
---

`ParseFeed` provides some basic methods to help with writing patterns.

The first is a "expecting a next token" function which produces an error if there is no next token.
--- parsefeed default methods+=
fn expect(&mut self) -> Result<Self::Token> {
  if let Some(val) = self.step() {
    Ok(val)
  } else {
    Err(Error::unexpected_end_of_input())
  }
}
---
The second is an extension of the first to "expect n tokens", simply by repeating `expect()` `n` times.
--- parsefeed default methods+=
fn expect_n(&mut self, n: usize) -> Result<Vec<Self::Token>> {
  let mut items = Vec::with_capacity(n);
  for _ in 0..n {
    items.push(self.expect()?);
  }
  Ok(items)
}
--- 

@s A default implementation

A simple default representation of a feed from an existing iterator is essential to allow Ape to be used in its intended use case - matching over iterators. This can be achieved by using a wrapper to extend an iterator with cloning functionality, which we do using the `backtracking_iterator` crate.
--- imports
extern crate backtracking_iterator;
---

Specifically, we use the ability to turn any iterator into a concurrent-safe, cloneable one, with no copies - by emitting references to items.
--- imports
use backtracking_iterator::concurrent::ConcurrentReferencingBacktrackingIterator;
---

Then the default representation is simply a wrapping struct, but named to make clear the change in item type
--- parsefeed implementations
pub struct RefParseState<'item, Iter>(ConcurrentReferencingBacktrackingIterator<'item, Iter>) where Iter: 'item, Iter: Iterator;

impl<'item, Iter> From<Iter> for RefParseState<'item, Iter> where Iter: 'item, Iter: Iterator {
  fn from(iter: Iter) -> Self {
    RefParseState(ConcurrentReferencingBacktrackingIterator::from(iter))
  }
}
---
which duplicates the iterator behaviour of its internal iterator copy
--- parsefeed implementations
impl<'item, Iter> Clone for RefParseState<'item, Iter> where Iter: 'item, Iter: Iterator {
  fn clone(&self) -> Self {
    RefParseState(self.0.clone())
  }
}

impl<'item, Iter> Iterator for RefParseState<'item, Iter> where Iter: 'item, Iter: Iterator {
  type Item = &'item Iter::Item;

  fn next(&mut self) -> Option<Self::Item> {
    self.0.next()
  }
}
---
As these are both `Clone` and `Iterator`, there's no need to implement the `ParseFeed` trait.

The above also has a copying equivalent, for cases where the copying is inexpensive or a lack of references is desireable.
--- imports
use backtracking_iterator::concurrent::ConcurrentCopyingBacktrackingIterator;
---

This default implementation is also a wrapping struct, and the implementation is identical to the above, apart from the omission of ref-relevant code, such as the lifetime information
--- parsefeed implementations
pub struct CopyParseState<Iter>(ConcurrentCopyingBacktrackingIterator<Iter>) where Iter: Iterator, Iter::Item: Clone;

impl<Iter> From<Iter> for CopyParseState<Iter> where Iter: Iterator, Iter::Item: Clone {
  fn from(iter: Iter) -> Self {
    CopyParseState(ConcurrentCopyingBacktrackingIterator::from(iter))
  }
}

impl<Iter> Clone for CopyParseState<Iter> where Iter: Iterator, Iter::Item: Clone {
  fn clone(&self) -> Self {
    CopyParseState(self.0.clone())
  }
}

impl<Iter> Iterator for CopyParseState<Iter> where Iter: Iterator, Iter::Item: Clone {
  type Item = Iter::Item;

  fn next(&mut self) -> Option<Self::Item> {
    self.0.next()
  }
}
---



